import os
import sys
import requests
from datetime import datetime, timedelta
import zipfile
import rarfile
import base64
import hashlib
import shutil
import logging
from pymisp import PyMISP, MISPEvent

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

MISP_URL = ""
MISP_KEY = ""
MISP_VERIFYCERT = True
VT_URL_V2 = "https://www.virustotal.com/vtapi/v2/file/report"
VT_API_KEY = ""

def get_vt_status(sha256_hash):
    params = {
        "apikey": VT_API_KEY,
        "resource": sha256_hash
    }

    response = requests.get(VT_URL_V2, params=params)
    if response.status_code != 200:
        log_message(f"[ERROR] Failed to query VirusTotal for hash {sha256_hash}. HTTP Status: {response.status_code}")
        return "Unknown"
    
    vt_data = response.json()
    if vt_data.get("response_code") == 1:
        positives = vt_data.get("positives", 0)
        if positives > 0:
            return "Detected"
        else:
            return "Not Detected"
    else:
        return "Not Detected"

def display_misp_upload_progress():
    ascii_art = r"""
	
  __  __       _                        ____                            
 |  \/  |     | |                      |  _ \                           
 | \  / | __ _| |_      ____ _ _ __ ___| |_) | __ _ ______ _  __ _ _ __ 
 | |\/| |/ _` | \ \ /\ / / _` | '__/ _ \  _ < / _` |_  / _` |/ _` | '__|
 | |  | | (_| | |\ V  V / (_| | | |  __/ |_) | (_| |/ / (_| | (_| | |   
 |_|__|_|\__,_|_| \_/\_/ \__,_|_|  \___|____/ \__,_/___\__,_|\__,_|_|   
 |  __ \                                                                
 | |__) |_ _ _ __ ___  ___ _ __                                         
 |  ___/ _` | '__/ __|/ _ \ '__|                                        
 | |  | (_| | |  \__ \  __/ |                                           
 |_|   \__,_|_|  |___/\___|_|                                           
                                                                        
    """
    print(ascii_art)

def log_message(message, type="[INFO]"):
    formatted_message = f"[{type}] {message}"
    print(formatted_message)
    with open('output.txt', 'a') as out_file:
        out_file.write(formatted_message + "\n")

def remove_directory_with_contents(path):
    try:
        if os.path.exists(path) and os.path.isdir(path):
            for root, dirs, files in os.walk(path, topdown=False):
                for file in files:
                    file_path = os.path.join(root, file)
                    os.remove(file_path)
                for dir_name in dirs:
                    dir_path = os.path.join(root, dir_name)
                    os.rmdir(dir_path)
            os.rmdir(path)
            log_message(f"[INFO] Removed directory and its contents: {path}")
        else:
            log_message(f"[ERROR] Directory {path} doesn't exist or is not a directory!")
    except Exception as e:
        log_message(f"[ERROR] Failed to remove directory and its contents {path}: {e}")

def download_file(url, destination):
    try:
        with open(destination, 'wb') as f:
            response = requests.get(url, stream=True)
            total_length = response.headers.get('content-length')

            if total_length is None:
                f.write(response.content)
            else:
                downloaded = 0
                total_length = int(total_length)
                for data in response.iter_content(chunk_size=4096):
                    downloaded += len(data)
                    f.write(data)
                    done = int(50 * downloaded / total_length)
                    msg = f"\r[{'#' * done}{'.' * (50-done)}] {downloaded/1024:.2f}MB downloaded"
                    log_message(msg, type="Verbose")
                    
                    
        if response.status_code == 200:
            log_message("\n[SUCCESS] File downloaded successfully!")
        else:
            log_message(f"\n[ERROR] File download failed with status code {response.status_code}!")
            return False
    except Exception as e:
        log_message(f"\n[ERROR] Exception during file download: {e}")
        return False
    return True

def init_misp():
    try:
        return PyMISP(MISP_URL, MISP_KEY, MISP_VERIFYCERT)
    except Exception as e:
        logging.error(f"Failed to initialize MISP connection: {e}")
        log_message(f"[ERROR] Failed to initialize MISP connection: {e}")
        sys.exit(1)

def create_misp_event(misp):
    try:
        event = MISPEvent()
        event.info = f"Malwarebazaar samples {datetime.now().strftime('%Y-%m-%d')}"
        event.distribution = 1
        event.threat_level_id = 2
        event.analysis = 0
        event.add_tag("Malware")

        result = misp.add_event(event)
        if 'Event' in result:
            event_id = result['Event']['id']
            log_message(f"[SUCCESS] MISP Event created with ID: {event_id}")
            return event_id
        else:
            log_message("[ERROR] Failed to create MISP Event.")
            if 'errors' in result:
                for error in result['errors']:
                    log_message(f"[ERROR] {error}")
            return None
    except Exception as e:
        log_message(f"[ERROR] An unexpected error occurred during MISP event creation: {e}")
        return None

def compute_hashes(data):
    md5_hash = hashlib.md5(data).hexdigest()
    sha1_hash = hashlib.sha1(data).hexdigest()
    sha256_hash = hashlib.sha256(data).hexdigest()
    return md5_hash, sha1_hash, sha256_hash
    
def zip_file_and_compute_hashes(file_path):
    with open(file_path, 'rb') as f:
        original_data = f.read()

    md5_original, sha1_original, sha256_original = compute_hashes(original_data)
    log_message(f"Calculated Hashes for {file_path} - MD5: {md5_original}, SHA1: {sha1_original}, SHA256: {sha256_original}")
    
    zip_name = file_path + ".zip"
    with zipfile.ZipFile(zip_name, 'w') as zipf:
        zipf.write(file_path, os.path.basename(file_path))
    log_message(f"Zipped {file_path} as {zip_name}")
    
    vt_status = get_vt_status(sha256_original)
    formatted_comment = f"VT status: {vt_status}\nMD5: {md5_original}\nSHA1: {sha1_original}\nSHA256: {sha256_original}"
    return zip_name, md5_original, sha1_original, sha256_original, formatted_comment

def upload_file_to_misp(misp, event_id, file_path):
    zip_name, md5, sha1, sha256, formatted_comment = zip_file_and_compute_hashes(file_path)
    
    with open(zip_name, 'rb') as f:
        zipped_data = f.read()

    attribute = {
        "type": "attachment",
        "category": "Payload delivery",
        "value": os.path.basename(zip_name),
        "data": base64.b64encode(zipped_data).decode('utf-8'),
        "comment": formatted_comment,
        "Tag": [
            {"name": "Malware"}
        ]
    }
    
    result = misp.add_attribute(event_id, attribute)
    if 'Attribute' in result:
        log_message(f"[INFO] Uploaded {zip_name} to MISP with ID {result['Attribute']['id']}")
    else:
        log_message(f"[ERROR] Failed to upload {zip_name} to MISP.")

def extract_compressed_file(file_path):
    dir_name = file_path + "_extracted"
    os.makedirs(dir_name, exist_ok=True)
    log_message(f"Starting extraction of {file_path}...")

    try:
        if file_path.endswith(".zip"):
            with zipfile.ZipFile(file_path, 'r') as zip_ref:
                zip_ref.extractall(dir_name, pwd=b'infected')
        elif file_path.endswith(".rar"):
            with rarfile.RarFile(file_path, 'r') as rar_ref:
                rar_ref.extractall(dir_name, pwd='infected')
    except (zipfile.BadZipFile, rarfile.BadRarFile):
        log_message(f"[ERROR] {file_path} is not a valid archive file.")
        return None
    except (rarfile.RarWrongPassword, RuntimeError):
        try:
            if file_path.endswith(".zip"):
                with zipfile.ZipFile(file_path, 'r') as zip_ref:
                    zip_ref.extractall(dir_name)
            elif file_path.endswith(".rar"):
                with rarfile.RarFile(file_path, 'r') as rar_ref:
                    rar_ref.extractall(dir_name)
        except Exception as e:
            log_message(f"[ERROR] Failed to extract {file_path} without password. Reason: {e}")
            return None
    except Exception as e:
        log_message(f"[ERROR] Failed to extract {file_path}. Reason: {e}")
        return None

    log_message(f"Successfully extracted {file_path} to {dir_name}")
    return dir_name

def process_directory(directory_path, misp, event_id):
    queue = [directory_path]
    
    while queue:
        current_item = queue.pop()
        if os.path.basename(current_item) == "output.txt":
            continue
        
        if os.path.isfile(current_item):
            if current_item.endswith(('.zip', '.rar')):
                extracted_dir = extract_compressed_file(current_item)
                if extracted_dir:  # Check if the directory was successfully extracted
                    queue.extend([os.path.join(extracted_dir, item) for item in os.listdir(extracted_dir)])
            else:
                upload_file_to_misp(misp, event_id, current_item)
        elif os.path.isdir(current_item):
            queue.extend([os.path.join(current_item, item) for item in os.listdir(current_item)])

def main():
    try:
        current_working_dir = os.getcwd()
        display_misp_upload_progress()
        prev_day = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
        zip_path = os.path.join(current_working_dir, f"{prev_day}.zip")
        extracted_path = os.path.join(current_working_dir, prev_day)

        url = f"https://datalake.abuse.ch/malware-bazaar/daily/{prev_day}.zip"
        download_successful = download_file(url, zip_path)

        if download_successful:
            try:
                with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                    zip_ref.extractall(extracted_path, pwd=b'infected')
                os.remove(zip_path)
            except zipfile.BadZipFile:
                log_message("[ERROR] The downloaded file is not a valid zip file.")
            except Exception as e:
                log_message(f"[ERROR] An error occurred during file extraction: {e}")

            misp = init_misp()
            event_id = create_misp_event(misp)

            if event_id:
                process_directory(extracted_path, misp, event_id)
                
        log_message("[Success] All files uploaded to MISP!")

        print("Current directory contents:")
        print(os.listdir(current_working_dir))

    except IsADirectoryError as e:
        log_message(f"Tried to upload a directory: {e}", type="Error")
    except Exception as e:
        log_message(f"An unexpected error occurred: {e}", type="Error")
    finally:
        if os.path.exists(extracted_path):
            if os.path.isdir(extracted_path):
                remove_directory_with_contents(extracted_path)
            else:
                log_message(f"[ERROR] {extracted_path} is not a directory.")
        
        output_txt_path = os.path.join(current_working_dir, 'output.txt')
        if os.path.exists(output_txt_path):
            os.remove(output_txt_path)

        print("After cleanup, current directory contents:")
        print(os.listdir(current_working_dir))
        
if __name__ == '__main__':
    main()
